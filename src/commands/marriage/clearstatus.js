import { EmbedBuilder } from 'discord.js';
import UserClaim from '../../models/UserClaim.js';

export default {
    name: 'clearstatus',
    aliases: ['clearinfo', 'autoclear'],
    description: 'Mostra informa√ß√µes sobre o sistema de clear autom√°tico',
    async execute(client, message, args) {
        try {
            // Obter estat√≠sticas atuais
            const totalClaims = await UserClaim.countDocuments();
            const uniqueUsers = await UserClaim.distinct('userId');
            
            // Calcular data do pr√≥ximo clear
            const now = new Date();
            const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0); // √öltimo dia do m√™s atual
            const isLastDay = now.getDate() === nextMonth.getDate();
            
            let nextClearDate;
            if (isLastDay) {
                // Se √© hoje o √∫ltimo dia, o pr√≥ximo clear √© no final do pr√≥ximo m√™s
                nextClearDate = new Date(now.getFullYear(), now.getMonth() + 2, 0);
            } else {
                // Sen√£o, √© no final deste m√™s
                nextClearDate = nextMonth;
            }
            
            const daysUntilClear = Math.ceil((nextClearDate - now) / (1000 * 60 * 60 * 24));
            
            // Criar embed informativo
            const embed = new EmbedBuilder()
                .setTitle('üßπ Sistema de Clear Autom√°tico')
                .setDescription('Informa√ß√µes sobre o clear mensal de claims')
                .setColor('#5865f2')
                .addFields(
                    {
                        name: 'üìä Estat√≠sticas Atuais',
                        value: `**Total de Claims:** ${totalClaims}\n**Utilizadores com Claims:** ${uniqueUsers.length}`,
                        inline: true
                    },
                    {
                        name: 'üìÖ Pr√≥ximo Clear',
                        value: `**Data:** ${nextClearDate.toLocaleDateString('pt-PT')}\n**Dias restantes:** ${daysUntilClear}`,
                        inline: true
                    },
                    {
                        name: '‚ÑπÔ∏è Como Funciona',
                        value: 'No √∫ltimo dia de cada m√™s, todos os claims s√£o automaticamente removidos e os pontos correspondentes s√£o atribu√≠dos aos utilizadores.',
                        inline: false
                    },
                    {
                        name: 'üí∞ C√°lculo de Pontos',
                        value: 'Cada personagem tem um valor em pontos. Quando o clear acontece, recebes os pontos de todos os teus personagens claimed.',
                        inline: false
                    },
                    {
                        name: 'üîß Clear Manual',
                        value: 'O owner do bot pode executar um clear manual usando o comando `%clear`.',
                        inline: false
                    }
                )
                .setAuthor({ 
                    name: message.author.displayName, 
                    iconURL: message.author.displayAvatarURL() 
                })
                .setTimestamp()
                .setFooter({ 
                    text: isLastDay ? 'üö® Hoje √© o √∫ltimo dia do m√™s!' : 'Clear autom√°tico ativo' 
                });

            // Destacar se √© o √∫ltimo dia do m√™s
            if (isLastDay) {
                embed.setColor('#FF4444');
                embed.setDescription('‚ö†Ô∏è **ATEN√á√ÉO!** Hoje √© o √∫ltimo dia do m√™s. O clear autom√°tico ser√° executado!');
            }

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('‚ùå Erro no comando clearstatus:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå Erro no Sistema')
                .setDescription('Ocorreu um erro ao obter as informa√ß√µes do clear. Tenta novamente!')
                .setColor('#FF4444')
                .setTimestamp();
            
            await message.reply({ embeds: [errorEmbed] });
        }
    }
};
